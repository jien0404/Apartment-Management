openapi: 3.0.0
info:
  title: "Authentication API"
  description: "APIs for user authentication, including registration, login, forgot password, and password reset."
  version: "1.0.1"
servers:
  - url: http://localhost:5000
  - url: https://apartment-management-kjj9.onrender.com/
  - url: https://apartment-management-oy7f.onrender.com/
paths:
  /auth/register:
    post:
      summary: "Register a new user"
      description: "Registers a new user with a username, email, and password."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: "Confirmation email sent"
        '400':
          description: "Username or email already exists"
        '500':
          description: "Failed to send confirmation email"

  /auth/confirm_email/{token}:
    get:
      summary: "Confirm user's email"
      description: "Confirms the user's email via the token received."
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: "Email confirmation token"
      responses:
        '200':
          description: "User registration successful"
        '401':
          description: "Invalid or expired token"

  /auth/login:
    post:
      summary: "User login"
      description: "Allows a registered user to log in by providing username and password."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "password123"
                remember:
                  type: boolean
                  example: false
      responses:
        '200':
          description: "Login successful"
        '403':
          description: "Login failed, check credentials"

  /auth/forgot-password:
    post:
      summary: "Forgot password"
      description: "Sends a validation code to the user's email to reset the password."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: No account registered with the provided email
  
  /auth/validation-code:
    post:
      summary: Try to validate the code
      requestBody:
        description: The code which requires checking
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                input_code:
                  type: string
      responses:
        '200':
          description: validate successfully
        '400':
          description: invalid code 

  /auth/reset-password:
    post:
      summary: Update the password in database
      requestBody:
        description: The new password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                new_password:
                  type: string
      responses:
        '200':
          description: Password has been reset!!!

  /auth/logout:
    get:
      summary: "Logout"
      description: "Logs out the current user and clears the session."
      responses:
        '200':
          description: "Logout successful"

  /admin/residents:
    get:
      summary: Get all residents
      description: Retrieves a list of all residents with their information.
      tags:
        - Admin
      parameters:
        - name: apartment_number
          in: query
          required: true
          description: The apartment number of the house.
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: A list of residents
          content:
            application/json:
              schema:
                type: object
                properties:
                  resident_info:
                    type: array
                    items:
                      type: object
                      properties:
                        full_name:
                          type: string
                          example: Vũ Văn Hoàng
                        date_of_birth:
                          type: string
                          format: date
                          example: 1990-01-01
                        id_number:
                          type: string
                          example: ABC123456
                        age:
                          type: integer
                          example: 30
                        room:
                          type: integer
                          example: 101
                        phone_number:
                          type: string
                          example: "09436255193"
                        status:
                          type: string
                          example: Thường trú
        '500':
          description: Server error

  /admin/house/{apartment_number}:
    get:
      summary: House info
      tags:
        - Admin
      description: Retrieve an apartment information
      parameters:
        - name: apartment_number
          in: path
          required: true
          description: The apartment number
          schema:
            type: integer
      responses:
        '200':
          description: Info of the apartment
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: object
                    properties:
                      area:
                        type: number
                        format: float
                        example: 40.00
                      status:
                        type: string
                        example: occupied
                      owner:
                        type: string
                        example: Hoàng Ánh
                      num_residents:
                        type: integer
                        example: 5
                      phone_number:
                        type: string
                        example: "01684793145"
        '404':
          description: House not found
        '500':
          description: Server error

  /admin/update/{house_id}:
    post:
      summary: Update house
      tags:
        - Admin
      parameters:
        - name: house_id
          in: path
          required: true
          description: The ID of the household to update.
          schema:
            type: integer
            example: 1
      requestBody:
        description: Update apartment information
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone_number:
                  type: string        
                  example: "0916243155"
                num_residents:
                  type: integer
                  example: 5
      responses:
        '200':
          description: Updated successfully
        '404':
          description: House not found
        '500':
          description: Server error

  /admin/update-res/{res_id}:
    post:
      summary: Update resident info
      tags:
        - Admin
      parameters:
        - name: res_id
          in: path
          required: true
          description: The ID of the resident to update.
          schema:
            type: integer
            example: 1
      requestBody:
        description: Update resident information
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone_number:
                  type: string        
                  example: "0916243155"
                full_name:
                  type: string
                  example: "Lmao"
                status:
                  type: string
                  example: "Tạm vắng" 
                date_of_birth:
                  type: string
                  example: "2004-12-21"   
      responses:
        '200':
          description: Updated successfully
        '404':
          description: Resident not found
        '500':
          description: Server error        

/admin/add-resident:
    post:
      summary: "Add a new resident"
      description: "Adds a new resident to the system by providing their information."
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - resident_id
                - household_id
                - resident_name
                - status
              properties:
                resident_id:
                  type: integer
                  example: 1
                household_id:
                  type: integer
                  example: 101
                resident_name:
                  type: string
                  example: "Nguyễn Quyết Thắng"
                status:
                  type: string
                  example: "Thường trú"
      responses:
        '201':
          description: "Resident created successfully"
        '400':
          description: "Missing required field"
        '500':
          description: "Unexpected error"

  /admin/remove-resident/{resident_id}:
    post:
      summary: "Remove a resident"
      description: "Removes a resident from the system using their resident ID."
      tags:
        - Admin
      parameters:
        - name: resident_id
          in: path
          required: true
          description: "The ID of the resident to remove."
          schema:
            type: integer
            example: 1
      responses:
        '201':
          description: "Resident removed successfully"
        '404':
          description: "Resident not found"
        '500':
          description: "Unexpected error"

  /admin/update-resident/{resident_id}:
    post:
      summary: "Update a resident's information"
      description: "Updates a resident's information based on the provided resident ID."
      tags:
        - Admin
      parameters:
        - name: resident_id
          in: path
          required: true
          description: "The ID of the resident to update."
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
                  example: "0916243155"
                resident_name:
                  type: string
                  example: "Lmao"
                status:
                  type: string
                  example: "Tạm vắng"
                date_of_birth:
                  type: string
                  format: date
                  example: "2004-12-21"
      responses:
        '201':
          description: "Resident updated successfully"
        '404':
          description: "Resident not found"
        '500':
          description: "Unexpected error"

  /admin/{household_id}/residents:
    get:
      tags:
        - Residents
      summary: Get residents of a household
      description: Retrieves the owner and residents of a household by the household ID.
      parameters:
        - name: household_id
          in: path
          required: true
          description: The ID of the household.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of residents in the household
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner:
                    type: object
                    properties:
                      resident_id:
                        type: integer
                        example: 1
                      resident_name:
                        type: string
                        example: Nguyễn Quyết Thắng
                      date_of_birth:
                        type: string
                        format: date
                        example: 1985-08-15
                      id_number:
                        type: string
                        example: '002948492849'
                      phone_number:
                        type: string
                        example: '018276478727'
                      status:
                        type: string
                        example: Thường trú
                  info:
                    type: array
                    items:
                      type: object
                      properties:
                        resident_id:
                          type: integer
                          example: 2
                        resident_name:
                          type: string
                          example: Trần Thanh Phong
                        date_of_birth:
                          type: string
                          format: date
                          example: 1990-07-01
                        id_number:
                          type: string
                          example: '001204019225'
                        phone_number:
                          type: string
                          example: '0989233677'
                        status:
                          type: string
                          example: Thường trú
        '404':
          description: Household or residents not found
        '500':
          description: Internal server error
          
  /admin/not-pay:
    get:
      summary: Return apartments not paid
      description: Return apartments where fee hasn't been paid
      tags:
        - Admin
      responses:
        '200':
          description: Return information of apartments that haven't paid
          content:
            application/json:
              schema:
                type: object
                properties:
                  infor:
                    type: array
                    items:
                      type: object
                      properties:
                        room:
                          type: integer
                          example: 101
                        amount:
                          type: number
                          format: float
                          example: 550000.00
                        due_date:
                          type: string
                          format: date
                          example: 2024-10-20
                        service_fee:
                          type: number
                          format: float
                          example: 55000.00
                        manage_fee:
                          type: number
                          format: float
                          example: 55000.00
                        fee_type:
                          type: string
                          example: Tiền tháng 10
        '500':
          description: Internal server error

  /admin/fee/{household_id}:
    get:
      summary: Calculate fees for a household
      description: Retrieve service and management charges for a specific household.
      tags:
        - Admin
      parameters:
        - in: path
          name: household_id
          required: true
          schema:
            type: integer
          description: The ID of the household
      responses:
        '200':
          description: Fees calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      type: object
                      properties:
                        service_charge:
                          type: string
                        manage_charge:
                          type: string
                        fee:
                          type: string
        '400':
          description: Missing or invalid household information

  /admin/add-fee:
    post:
      summary: Add new fee for households
      description: Add service and management fees for all households.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - start_date
                - due_date
                - service_rate
                - manage_rate
                - description
              properties:
                start_date:
                  type: string
                  format: date
                due_date:
                  type: string
                  format: date
                service_rate:
                  type: number
                manage_rate:
                  type: number
                description:
                  type: string
      responses:
        '200':
          description: Fees added successfully
        '400':
          description: Cannot add fee

  /admin/fees:
    get:
      summary: Retrieve fees
      description: Get the description of the fees due as of today.
      tags:
        - Admin
      responses:
        '200':
          description: Fees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  infor:
                    type: array
                    items:
                      type: string
                  detail:
                    type: array
                    items:
                      type: string
        '400':
          description: Error in retrieving fees

    post:
      summary: Retrieve fees for a specific date
      description: Get the description of the fees due as of a specified date.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - date
              properties:
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Fees retrieved successfully
        '400':
          description: Invalid or missing date

  /admin/update-fee:
    post:
      summary: Update existing fee details
      description: Update the management and service rates for fees based on their description.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - description
                - manage_rate
                - service_rate
              properties:
                description:
                  type: string
                manage_rate:
                  type: number
                service_rate:
                  type: number
      responses:
        '200':
          description: Fees updated successfully
        '400':
          description: Invalid or missing data
        '404':
          description: Fees not found with the given description

  /admin/delete-fee:
    post:
      summary: Delete fees based on description
      description: Delete fees by their description.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
      responses:
        '200':
          description: Delete successful
        '400':
          description: Description not provided
        '404':
          description: No fees found with the given description
  /decorate/get-data:
    get:
      summary: Get data of Apartment for decorated
      tags:
        - decorate
      responses:
      '200':
        description: Returns data of Apartment for decorated

  /user/info:
     get:
      summary: User's info
      description: Return user's information
      tags:
        - User
      responses:
        '200':
          description: Info delivered successfully !!
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: object
                    properties:
                      username:
                        type: string
                        example: Giang Lake
                      user_role:
                        type: string
                        example: admin
                      user_email:
                        type: string
                        example: TheLake2004@gmail.com
                      phone_number:
                        type: string
                        example: 0989898989
        '500':
          description: Error in retrieving fees
